# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - master  
  paths:
    # only trigger if version number has changed
    include:
    - skippa/__init__.py

stages:
- stage: Build_Test
  jobs:
  - job: Build_Test

    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'

    variables:
      projectTestResultDir: junit

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        addToPath: true
      displayName: 'Use Python $(python.version)'

#    - script: |
#        sudo apt-get update && sudo apt-get install build-essential
#      name: gcc
#      displayName: 'Install core tools (gcc)'

    - script: |
        pip install --upgrade pip && \
        pip install setuptools wheel && \
        pip install -r requirements.txt && \
        pip install -e .
        #python setup.py install
      name: install
      displayName: 'Install packages'

    - script: |
        pip install pytest pytest-cov
        python -m pytest --junitxml=junit/test-results.xml --cov=skippa --cov-report=xml
      name: run_tests
      displayName: 'Run tests'
      condition: succeeded()

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      displayName: 'Publish coverage results'

- stage: Publish
  dependsOn: Build_Test
  condition: succeeded()
  jobs:
  - job: Publish

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
      displayName: 'Use Python 3.8'

    - bash: |
        pip install -r requirements.txt
        pip install -r requirements_dev.txt
        pip install -e .
        make docs
        make dist
      displayName: 'Install setuptools, wheel, sphinx, twine...'

    - bash: |
        # this does everything from clean build, build docs, build wheel and twine upload
        twine upload -u datasciencelab -p $(PYPIPASSWORD) --non-interactive dist/*
      env:
        PYPIPASSWORD: $(PYPIPASSWORD)
      displayName: 'Run make release'
